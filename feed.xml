<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://www.atomvm.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.atomvm.net/" rel="alternate" type="text/html" /><updated>2024-02-29T22:02:35+00:00</updated><id>https://www.atomvm.net/feed.xml</id><title type="html">AtomVM</title><subtitle>Welcome to AtomVM, the Erlang virtual machine for IoT devices!</subtitle><author><name>atomvm.net</name></author><entry><title type="html">Announcing AtomVM v0.6.0-beta.1 (Pre-release)</title><link href="https://www.atomvm.net/2024/02/29/Release_v0.6.0-beta.1.html" rel="alternate" type="text/html" title="Announcing AtomVM v0.6.0-beta.1 (Pre-release)" /><published>2024-02-29T00:00:00+00:00</published><updated>2024-02-29T00:00:00+00:00</updated><id>https://www.atomvm.net/2024/02/29/Release_v0.6.0-beta.1</id><content type="html" xml:base="https://www.atomvm.net/2024/02/29/Release_v0.6.0-beta.1.html">&lt;h2 id=&quot;20240229-announcing-atomvm-v060-beta1-pre-release&quot;&gt;2024/02/29 Announcing AtomVM v0.6.0-beta.1 (Pre-release)&lt;/h2&gt;

&lt;p&gt;We are pleased to announce that our pre-release of v0.6.0 is now in beta!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wait! What happened to the v0.6.0-beta.0 release?
Our all volunteer QA team (thank you @petermm) discovered a problem with the ESP32S3 builds that prevented the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp32init.beam&lt;/code&gt; from working properly. This is the default network application that will create a wireless AP, and allow you to upload an application to an ESP32 that has been flashed with the AtomVM image, but does not have a user application flashed yet. We have determined the cause of the problem, but it has not been fixed in this release. ESP32S3 users will need to flash an application over UART, and a crash-boot-loop is expected if the device is started without an application on the  application partition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this release &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/apidocs/erlang/eavmlib/spi.html&quot;&gt;SPI&lt;/a&gt;, &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/apidocs/erlang/eavmlib/i2c.html&quot;&gt;I2C&lt;/a&gt;, and &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/apidocs/erlang/eavmlib/uart.html&quot;&gt;UART&lt;/a&gt; peripheral configurations have been changed, for details consult the documentation for these modules in the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/apidocs/erlang/eavmlib/README.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eavmlib&lt;/code&gt; documentation&lt;/a&gt;. There is now an ESP32 API for allowing coexistence of native and Erlang I2C drivers, for example, allowing the use of the native &lt;a href=&quot;https://github.com/atomvm/atomvm_ssd1306&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomvm_ssd1306&lt;/code&gt; Display driver&lt;/a&gt;, with a pure erlang driver for the &lt;a href=&quot;https://github.com/atomvm/atomvm_examples/tree/master/erlang/i2c_example&quot;&gt;SHT3x temperature sensor&lt;/a&gt;. GPIO interrupt (currently only supported on ESP32 and STM32 platforms) messages can now be sent to a designated receiver using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpio:set_int/4&lt;/code&gt;. Support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lists:split/2&lt;/code&gt; has also been added. ESP32 platform now supports retrieving the deviceâ€™s e-fuse MAC address with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp:get_default_mac/0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;AtomVM now uses UTF-8 encoding for atoms when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;erlang:term_to_binary/1&lt;/code&gt;, in conformance with OTP-26, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_to_atom/1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atom_to_binary/1&lt;/code&gt; now default to utf8.  Support has been added for utf8 encoding to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_to_atom&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atom_to_*&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;We have made improvements to the rp2040 platform that should make development workflows much smoother.  The device will now accept re-flashing a new application using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomvm_rebar3_plugin&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pico_flash&lt;/code&gt; task after the application has exited.  Previously the device would be unresponsive after exiting.  There is also a default 20 second timeout, which the device will wait for a USB console connection to be established, before running the application.  Previously our default build would start the application immediately, giving the user no time to connect to be able to see the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello_world&lt;/code&gt; before the application exited, and the device became unresponsive.&lt;/p&gt;

&lt;p&gt;The port call tuple format has been changed to the same format as gen_server, so cast support can be added. This change means older versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomvmlib&lt;/code&gt; will not work, libraries from latest version must be used. Check the &lt;a href=&quot;https://github.com/atomvm/AtomVM/blob/v0.6.0-beta.1/UPDATING.md&quot;&gt;Update Instructions&lt;/a&gt; for other breaking changes for both BEAM application developers, as well as for contributors, and driver developers using nifs or ports.&lt;/p&gt;

&lt;p&gt;Under the hood enhancements feature a new atom table, which uses less memory, and has improved performance.&lt;/p&gt;

&lt;p&gt;Several memory related bugs have been fixed. A random number generation bug has been fixed on ESP32 and RPi2040, as well as a bug shared by both platforms that would cause invalid GPIO pull directions to be silently set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;floating&lt;/code&gt; without an error.&lt;/p&gt;

&lt;p&gt;For the full set of bug fixes, changes and additions since the v0.6.0-alpha.2 release consult the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/CHANGELOG.html&quot;&gt;Changelog&lt;/a&gt;, and check the &lt;a href=&quot;https://github.com/atomvm/AtomVM/blob/v0.6.0-beta.1/UPDATING.md&quot;&gt;Updating Instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download images and binaries are available for most platforms, except STM32 (and some generic_unix hosts for this release due to specific Mbed-TLS requirements) are available from &lt;a href=&quot;https://github.com/atomvm/AtomVM/releases/tag/v0.6.0-beta.1&quot;&gt;AtomVM Releases on GitHub&lt;/a&gt;. STM32 users as well as anyone needing to build a generic_unix port for a device without release binaries should consult the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/build-instructions.html&quot;&gt;Build Instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The git repository and tarballs of the AtomVM source release for all platforms can be found on our &lt;a href=&quot;https://github.com/atomvm/AtomVM&quot;&gt;GitHub AtomVM page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Documentation for the v0.6.0-beta.1 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-beta.1/&quot;&gt;AtomVM Documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, tools, drivers, and modules are available on the &lt;a href=&quot;https://github.com/atomvm&quot;&gt;GitHub AtomVM Project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many thanks go to &lt;a href=&quot;https://github.com/bettio&quot;&gt;Davide Bettio&lt;/a&gt;, for creating such a fine work of software, as well as the &lt;a href=&quot;https://github.com/atomvm/AtomVM/graphs/contributors&quot;&gt;contributors&lt;/a&gt; and &lt;a href=&quot;https://github.com/atomvm/AtomVM/issues&quot;&gt;testers who have helped make this release possible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The AtomVM team&lt;/p&gt;</content><author><name>atomvm.net</name></author><summary type="html">2024/02/29 Announcing AtomVM v0.6.0-beta.1 (Pre-release) We are pleased to announce that our pre-release of v0.6.0 is now in beta! Wait! What happened to the v0.6.0-beta.0 release? Our all volunteer QA team (thank you @petermm) discovered a problem with the ESP32S3 builds that prevented the default esp32init.beam from working properly. This is the default network application that will create a wireless AP, and allow you to upload an application to an ESP32 that has been flashed with the AtomVM image, but does not have a user application flashed yet. We have determined the cause of the problem, but it has not been fixed in this release. ESP32S3 users will need to flash an application over UART, and a crash-boot-loop is expected if the device is started without an application on the application partition. In this release SPI, I2C, and UART peripheral configurations have been changed, for details consult the documentation for these modules in the eavmlib documentation. There is now an ESP32 API for allowing coexistence of native and Erlang I2C drivers, for example, allowing the use of the native atomvm_ssd1306 Display driver, with a pure erlang driver for the SHT3x temperature sensor. GPIO interrupt (currently only supported on ESP32 and STM32 platforms) messages can now be sent to a designated receiver using gpio:set_int/4. Support for lists:split/2 has also been added. ESP32 platform now supports retrieving the deviceâ€™s e-fuse MAC address with esp:get_default_mac/0. AtomVM now uses UTF-8 encoding for atoms when using erlang:term_to_binary/1, in conformance with OTP-26, and binary_to_atom/1 and atom_to_binary/1 now default to utf8. Support has been added for utf8 encoding to *_to_atom and atom_to_* functions. We have made improvements to the rp2040 platform that should make development workflows much smoother. The device will now accept re-flashing a new application using the atomvm_rebar3_plugin pico_flash task after the application has exited. Previously the device would be unresponsive after exiting. There is also a default 20 second timeout, which the device will wait for a USB console connection to be established, before running the application. Previously our default build would start the application immediately, giving the user no time to connect to be able to see the output of hello_world before the application exited, and the device became unresponsive. The port call tuple format has been changed to the same format as gen_server, so cast support can be added. This change means older versions of atomvmlib will not work, libraries from latest version must be used. Check the Update Instructions for other breaking changes for both BEAM application developers, as well as for contributors, and driver developers using nifs or ports. Under the hood enhancements feature a new atom table, which uses less memory, and has improved performance. Several memory related bugs have been fixed. A random number generation bug has been fixed on ESP32 and RPi2040, as well as a bug shared by both platforms that would cause invalid GPIO pull directions to be silently set to floating without an error. For the full set of bug fixes, changes and additions since the v0.6.0-alpha.2 release consult the Changelog, and check the Updating Instructions. Download images and binaries are available for most platforms, except STM32 (and some generic_unix hosts for this release due to specific Mbed-TLS requirements) are available from AtomVM Releases on GitHub. STM32 users as well as anyone needing to build a generic_unix port for a device without release binaries should consult the Build Instructions. The git repository and tarballs of the AtomVM source release for all platforms can be found on our GitHub AtomVM page. Documentation for the v0.6.0-beta.1 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the AtomVM Documentation page. As always, tools, drivers, and modules are available on the GitHub AtomVM Project page. Many thanks go to Davide Bettio, for creating such a fine work of software, as well as the contributors and testers who have helped make this release possible. The AtomVM team</summary></entry><entry><title type="html">AtomVM `master` branch renamed</title><link href="https://www.atomvm.net/2024/02/22/master_branch_renamed.html" rel="alternate" type="text/html" title="AtomVM `master` branch renamed" /><published>2024-02-22T00:00:00+00:00</published><updated>2024-02-22T00:00:00+00:00</updated><id>https://www.atomvm.net/2024/02/22/master_branch_renamed</id><content type="html" xml:base="https://www.atomvm.net/2024/02/22/master_branch_renamed.html">&lt;h2 id=&quot;20240222-recent-updates-to-the-name-of-the-master-branch&quot;&gt;2024/02/22 Recent updates to the name of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/h2&gt;

&lt;p&gt;Earlier this month the name of the &lt;a href=&quot;https://github.com/atomvm/AtomVM&quot;&gt;AtomVM&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.  If you have previously made a local clone of the repository, and would like to keep up to date with changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch, there are a few &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; commands that will rename your local copy and update the git configuration to track the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; AtomVM branch on GitHub.&lt;/p&gt;

&lt;p&gt;From inside your local clone of &lt;a href=&quot;https://github.com/atomvm/AtomVM&quot;&gt;AtomVM&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shell$ git branch -m master main
shell$ git fetch origin
shell$ git branch -u origin/main main
shell$ git remote set-head origin -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point you now have a local clone that will stay up to date with changes in the upstream AtomVM &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;We have also recently created the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release-0.6&lt;/code&gt; branch, which should be used if you wish to contribute any bug fixes.  If you do find a bug, please open an &lt;a href=&quot;https://github.com/atomvm/AtomVM/issues&quot;&gt;issue on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you encounter a feature you think we are lacking, please &lt;a href=&quot;https://github.com/atomvm/AtomVM/issues&quot;&gt;open an issue&lt;/a&gt; for that too.  Any contributions of new features should be made on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;The AtomVM team&lt;/p&gt;</content><author><name>atomvm.net</name></author><summary type="html">2024/02/22 Recent updates to the name of the master branch. Earlier this month the name of the AtomVM master branch was renamed to main. If you have previously made a local clone of the repository, and would like to keep up to date with changes to the main branch, there are a few git commands that will rename your local copy and update the git configuration to track the main AtomVM branch on GitHub. From inside your local clone of AtomVM: shell$ git branch -m master main shell$ git fetch origin shell$ git branch -u origin/main main shell$ git remote set-head origin -a At this point you now have a local clone that will stay up to date with changes in the upstream AtomVM main branch. We have also recently created the release-0.6 branch, which should be used if you wish to contribute any bug fixes. If you do find a bug, please open an issue on GitHub. If you encounter a feature you think we are lacking, please open an issue for that too. Any contributions of new features should be made on the main branch. The AtomVM team</summary></entry><entry><title type="html">Previous Announcements</title><link href="https://www.atomvm.net/2023/12/10/old_news.html" rel="alternate" type="text/html" title="Previous Announcements" /><published>2023-12-10T00:00:00+00:00</published><updated>2023-12-10T00:00:00+00:00</updated><id>https://www.atomvm.net/2023/12/10/old_news</id><content type="html" xml:base="https://www.atomvm.net/2023/12/10/old_news.html">&lt;h2 id=&quot;20231210-announcing-atomvm-v060-alpha2-pre-release&quot;&gt;2023/12/10 Announcing AtomVM v0.6.0-alpha.2 (Pre-release)&lt;/h2&gt;

&lt;p&gt;This pre-release has a build dependency change from OpenSSL to one on &lt;a href=&quot;https://www.trustedfirmware.org/projects/mbed-tls/&quot;&gt;Mbed-TLS&lt;/a&gt; to provide cryptographic functions for the generic_unix platform.&lt;/p&gt;

&lt;p&gt;Numerous bugs have been fixed since the last release including where guards would raise exceptions instead of just being false, precision of integers used with timers which could yield to halts and wait times smaller than expected, and big endian CPUs are working again.&lt;/p&gt;

&lt;p&gt;New features include the introduction of OTP socket interface support, support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net:getaddrinfo/1,2&lt;/code&gt;, minimal OTP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssl&lt;/code&gt; interface support, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto:strong_rand_bytes/1&lt;/code&gt; using Mbed-TLS on generic_unix, ESP32 and RP2040 platforms, support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto:one_time/4,5&lt;/code&gt; on Unix and Pico as well as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto:hash/2&lt;/code&gt; on Pico. Improvements for the STM32 platform include complete device configuration without the need to edit hardcoded values in the source files, complete GPIO driver support, and improved performance by enabling flash cache and i-cache.&lt;/p&gt;

&lt;p&gt;For the full set of bug fixes, changes and additions consult the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.2/CHANGELOG.html&quot;&gt;Changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download images and binaries are available for most platforms, except STM32 (and some generic_unix hosts for this release due to specific Mbed-TLS requirements) are available from &lt;a href=&quot;https://github.com/atomvm/AtomVM/releases/tag/v0.6.0-alpha.2&quot;&gt;AtomVM Releases on GitHub&lt;/a&gt;. STM32 users as well as anyone needing to build a generic_unix port for a device without release binaries should consult the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.2/build-instructions.html&quot;&gt;Build Instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The git repository and tarballs of the AtomVM source release for all platforms can be found on our &lt;a href=&quot;https://github.com/atomvm/AtomVM&quot;&gt;GitHub AtomVM page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Documentation for the v0.6.0-alpha.2 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.2/&quot;&gt;AtomVM Documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, tools, drivers, and modules are available on the &lt;a href=&quot;https://github.com/atomvm&quot;&gt;GitHub AtomVM Project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many thanks go to &lt;a href=&quot;https://github.com/bettio&quot;&gt;Davide Bettio&lt;/a&gt;, for creating such a fine work of software, as well as the &lt;a href=&quot;https://github.com/atomvm/AtomVM/graphs/contributors&quot;&gt;contributors&lt;/a&gt; and &lt;a href=&quot;https://github.com/atomvm/AtomVM/issues&quot;&gt;testers who have helped make this release possible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The AtomVM team&lt;/p&gt;

&lt;h2 id=&quot;20231009-announcing-atomvm-v060-alpha1-pre-release&quot;&gt;2023/10/09 Announcing AtomVM v0.6.0-alpha.1 (Pre-release)&lt;/h2&gt;

&lt;p&gt;This is a follow up to the recent v0.6.0-alpha.0 release that fixes some bugs and adds a few new features.&lt;/p&gt;

&lt;p&gt;The ESP32 port gains support for ULP wakeup, and expands crypto support. Basic wifi support has been added for the RPi Pico W. There is now the ability to select from heap growth strategies as a fine-tuning option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_opt/2,4&lt;/code&gt;. Several platforms now have the ability to set the system clock with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomvm:posix_clock_settime/2&lt;/code&gt;. A few more standard Erlang functions have been added to the core libraries as well. For a complete list of all the changes consult the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.1/CHANGELOG.html&quot;&gt;Changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download images and binaries are available for most platforms (for now stm32 ports must be build locally) are available from &lt;a href=&quot;https://github.com/atomvm/AtomVM/releases/tag/v0.6.0-alpha.1&quot;&gt;AtomVM Releases on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The git repository and tarballs of the AtomVM source release for all platforms can be found on our &lt;a href=&quot;https://github.com/atomvm/AtomVM&quot;&gt;GitHub AtomVM page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Documentation for the v0.6.0-alpha.1 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.1/&quot;&gt;AtomVM Documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have a growing collection of tools, drivers, and modules available on the &lt;a href=&quot;https://github.com/atomvm&quot;&gt;GitHub AtomVM Project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many thanks go to &lt;a href=&quot;https://github.com/bettio&quot;&gt;Davide Bettio&lt;/a&gt;, for creating such a fine work of software, as well as the &lt;a href=&quot;https://github.com/atomvm/AtomVM/graphs/contributors&quot;&gt;contributors&lt;/a&gt; and &lt;a href=&quot;https://github.com/atomvm/AtomVM/issues&quot;&gt;testers who have helped make this release possible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The AtomVM team&lt;/p&gt;

&lt;h2 id=&quot;20230901-announcing-atomvm-v060-alpha0-pre-release&quot;&gt;2023/09/01 Announcing AtomVM v0.6.0-alpha.0 (Pre-release)&lt;/h2&gt;

&lt;p&gt;After many months of work, we are happy to announce a pre-release of v0.6.0-alpha.0 of the AtomVM virtual machine, a lightweight implementation of the BEAM for small and cheap micro-controllers!&lt;/p&gt;

&lt;p&gt;This pre-view contains many improvements and bug fixes that the AtomVM team has been working on, including SMP support on all multi-core platforms, support for the ESP32-S3, ESP32-C3, and ESP32-S2 chips, and the addition of a very basic rp2040 (a.k.a. Raspberry Pi Pico) port, as well as an emscripten port using nodejs with Wasm to run AtomVM in the browser. See the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.0/CHANGELOG.html&quot;&gt;Changelog&lt;/a&gt; for all the improvements, bug fixes, and breaking changes since the 0.5.0 release.&lt;/p&gt;

&lt;p&gt;Download images for the ESP32 family are available on the &lt;a href=&quot;https://github.com/atomvm/AtomVM/releases&quot;&gt;AtomVM Releases GitHub page&lt;/a&gt;. Other platforms should consult the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.0/build-instructions.html&quot;&gt;Build Instructions&lt;/a&gt; for the
v0.6.0-alpha.0 release.&lt;/p&gt;

&lt;p&gt;The git repository and tarballs of the AtomVM source release for all platforms can be found on our &lt;a href=&quot;https://github.com/atomvm/AtomVM&quot;&gt;GitHub AtomVM page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Documentation for the v0.6.0-alpha.0 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the &lt;a href=&quot;https://www.atomvm.net/doc/v0.6.0-alpha.0/&quot;&gt;AtomVM Documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have a growing collection of tools, drivers, and modules available on the &lt;a href=&quot;https://github.com/atomvm&quot;&gt;GitHub AtomVM Project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many thanks go to &lt;a href=&quot;https://github.com/bettio&quot;&gt;Davide Bettio&lt;/a&gt;, for creating such a fine work of software, as well as the &lt;a href=&quot;https://github.com/atomvm/AtomVM/graphs/contributors&quot;&gt;contributors&lt;/a&gt; and &lt;a href=&quot;https://github.com/atomvm/AtomVM/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;testers who have helped make this release possible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The AtomVM team&lt;/p&gt;

&lt;h2 id=&quot;20220405-atomvm-example-programs&quot;&gt;2022/04/05 AtomVM Example Programs&lt;/h2&gt;

&lt;p&gt;We have extracted our example programs into a self-contained and growing github repo with minimal dependencies. For example, if you have flashed the AtomVM image to an ESP32 device, you can simply use rebar3 to build and flash your applications, making the compile/flash/debug cycle you experience on embedded devices fairly painless.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/atomvm/atomvm_examples&quot;&gt;AtomVM Example Programs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that at this stage, support for building Elixir programs is quite far behind that of Erlang, so best to stick with Erlang until further notice.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;20220322-announcing-atomvm-050&quot;&gt;2022/03/22 Announcing AtomVM 0.5.0&lt;/h2&gt;

&lt;p&gt;After many months of work, we are happy to announce version 0.5.0 of the AtomVM virtual machine, a lightweight implementation of the BEAM for small and cheap micro-controllers!&lt;/p&gt;

&lt;p&gt;This release of AtomVM is our first development preview release. We are still shaking out some of the rough edges, but we feel the release is stable enough for intrepid developers to get started with simple Erlang or Elixir programs.&lt;/p&gt;

&lt;p&gt;A binary image of ESP32 release can be found in the &lt;a href=&quot;https://atomvm.net/download/&quot;&gt;download&lt;/a&gt; section of the AtomVM &lt;a href=&quot;https://atomvm.net/&quot;&gt;web page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The git repository and tarballs of the AtomVM source release for all other platforms can be found on our &lt;a href=&quot;https://github.com/atomvm&quot;&gt;GitHub project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Documentation of the AtomVM virtual machine, including a Getting Started Guide, can be found at the &lt;a href=&quot;https://doc.atomvm.net/index.html&quot;&gt;AtomVM Documentation page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many thanks go to Davide Bettio, for creating such a fine work of software, as well as the contributors and testers who have helped make this release possible.&lt;/p&gt;

&lt;p&gt;The AtomVM team&lt;/p&gt;</content><author><name>atomvm.net</name></author><summary type="html">2023/12/10 Announcing AtomVM v0.6.0-alpha.2 (Pre-release) This pre-release has a build dependency change from OpenSSL to one on Mbed-TLS to provide cryptographic functions for the generic_unix platform. Numerous bugs have been fixed since the last release including where guards would raise exceptions instead of just being false, precision of integers used with timers which could yield to halts and wait times smaller than expected, and big endian CPUs are working again. New features include the introduction of OTP socket interface support, support for net:getaddrinfo/1,2, minimal OTP ssl interface support, crypto:strong_rand_bytes/1 using Mbed-TLS on generic_unix, ESP32 and RP2040 platforms, support for crypto:one_time/4,5 on Unix and Pico as well as for crypto:hash/2 on Pico. Improvements for the STM32 platform include complete device configuration without the need to edit hardcoded values in the source files, complete GPIO driver support, and improved performance by enabling flash cache and i-cache. For the full set of bug fixes, changes and additions consult the Changelog. Download images and binaries are available for most platforms, except STM32 (and some generic_unix hosts for this release due to specific Mbed-TLS requirements) are available from AtomVM Releases on GitHub. STM32 users as well as anyone needing to build a generic_unix port for a device without release binaries should consult the Build Instructions. The git repository and tarballs of the AtomVM source release for all platforms can be found on our GitHub AtomVM page. Documentation for the v0.6.0-alpha.2 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the AtomVM Documentation page. As always, tools, drivers, and modules are available on the GitHub AtomVM Project page. Many thanks go to Davide Bettio, for creating such a fine work of software, as well as the contributors and testers who have helped make this release possible. The AtomVM team 2023/10/09 Announcing AtomVM v0.6.0-alpha.1 (Pre-release) This is a follow up to the recent v0.6.0-alpha.0 release that fixes some bugs and adds a few new features. The ESP32 port gains support for ULP wakeup, and expands crypto support. Basic wifi support has been added for the RPi Pico W. There is now the ability to select from heap growth strategies as a fine-tuning option to spawn_opt/2,4. Several platforms now have the ability to set the system clock with atomvm:posix_clock_settime/2. A few more standard Erlang functions have been added to the core libraries as well. For a complete list of all the changes consult the Changelog. Download images and binaries are available for most platforms (for now stm32 ports must be build locally) are available from AtomVM Releases on GitHub. The git repository and tarballs of the AtomVM source release for all platforms can be found on our GitHub AtomVM page. Documentation for the v0.6.0-alpha.1 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the AtomVM Documentation page. We have a growing collection of tools, drivers, and modules available on the GitHub AtomVM Project page. Many thanks go to Davide Bettio, for creating such a fine work of software, as well as the contributors and testers who have helped make this release possible. The AtomVM team 2023/09/01 Announcing AtomVM v0.6.0-alpha.0 (Pre-release) After many months of work, we are happy to announce a pre-release of v0.6.0-alpha.0 of the AtomVM virtual machine, a lightweight implementation of the BEAM for small and cheap micro-controllers! This pre-view contains many improvements and bug fixes that the AtomVM team has been working on, including SMP support on all multi-core platforms, support for the ESP32-S3, ESP32-C3, and ESP32-S2 chips, and the addition of a very basic rp2040 (a.k.a. Raspberry Pi Pico) port, as well as an emscripten port using nodejs with Wasm to run AtomVM in the browser. See the Changelog for all the improvements, bug fixes, and breaking changes since the 0.5.0 release. Download images for the ESP32 family are available on the AtomVM Releases GitHub page. Other platforms should consult the Build Instructions for the v0.6.0-alpha.0 release. The git repository and tarballs of the AtomVM source release for all platforms can be found on our GitHub AtomVM page. Documentation for the v0.6.0-alpha.0 pre-release of the AtomVM virtual machine, including a Getting Started Guide, can be found at the AtomVM Documentation page. We have a growing collection of tools, drivers, and modules available on the GitHub AtomVM Project page. Many thanks go to Davide Bettio, for creating such a fine work of software, as well as the contributors and testers who have helped make this release possible. The AtomVM team 2022/04/05 AtomVM Example Programs We have extracted our example programs into a self-contained and growing github repo with minimal dependencies. For example, if you have flashed the AtomVM image to an ESP32 device, you can simply use rebar3 to build and flash your applications, making the compile/flash/debug cycle you experience on embedded devices fairly painless. AtomVM Example Programs Please note that at this stage, support for building Elixir programs is quite far behind that of Erlang, so best to stick with Erlang until further notice.</summary></entry></feed>